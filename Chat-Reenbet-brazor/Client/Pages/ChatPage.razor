@page "/chatpage/{chatId}"
@inject NavigationManager navigationManager
@inject IChatService chatService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
 
<h1>@chat.Name</h1>
@if (@allLoaded == false)
{
    <h3>Loading...</h3>
}
else
{
    <div style="width: 100%; height: 500px; border-style: groove; overflow-y:scroll; word-break: break-word;"@ref="TextSpaceRef">
        <button class="btn btn-primary" @onclick="LoadMore">Load More</button>
     @foreach (var msg in messages)
     {
        <div><p><span>@(msg.Author.Login)</span> at <span style="font-size: 90%;">@msg.Date.Hour</span>:<span style="font-size: 90%;">@msg.Date.Minute</span> &#9 <span style="font-size: 75%;
">@msg.Date.ToShortDateString()</span><br><span>@(msg.Data)</span><button class="btn" @onclick="() => EditMessage(msg.Id)">Edit</button><button class="btn" @onclick="() => RemoveMessage(msg.Id)">Remove</button><button class="btn" @onclick="() => ReplyMessage(msg.Id)">Reply</button></p>
    @if (msg.Reply != null)
    {
        <p style="font-size: 90%;">&#129045 Reply to <span>@(msg.Reply.Author.Login):</span><span>@(msg.Reply.Data)</span></p>
    }
        </div>
     }
 </div>
 <div class="input-group">
     <input @bind-value="message"
     @bind-value:event="oninput"
     class="form-controll">
     <button class="btn btn-primary form-group-append" 
     @onclick="Send">
         Send
     </button>
 </div>
}
 

@code 
{
    [Parameter]
    public string chatId { get; set; }
    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    private string userName = string.Empty;
    private string message = string.Empty;
    private int loaded = 0;
    ElementReference TextSpaceRef;
    private bool allLoaded = false;
    private Chat chat = new Chat();

    private async Task Send()
    {
        
        string author = await LocalStorage.GetItemAsStringAsync("user_login");
        author = author.Trim('"');

         await hubConnection.SendAsync("SendMessage", message, author, chatId); 
        loaded += 1;
    }

    private async Task RemoveMessage(Guid messageId)
    {
        await hubConnection.SendAsync("RemoveMessage", messageId); 
        StateHasChanged();
    }

    private async Task EditMessage(Guid messageId)
    {
        await hubConnection.SendAsync("EditMessage", messageId, message); 
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        await hubConnection.InvokeAsync("GetMassagePack", chatId, loaded, Convert.ToString(hubConnection));
        StateHasChanged();
    }

    private async Task ReplyMessage(Guid replyId)
    {
        string author = await LocalStorage.GetItemAsStringAsync("user_login");
        author = author.Trim('"');
        System.Console.WriteLine(replyId);
        await hubConnection.SendAsync("ReplyMessage", message, author, chatId, replyId); 
        loaded += 1;
    }

    private async Task GetMessagePack()
    {
        await hubConnection.SendAsync("GetMassagePack", chatId, loaded); 
        loaded += 20;
    }

   private async Task Connect()
   {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>("AddMessage", (msg) => 
            {
                messages.Add(msg); 
                StateHasChanged();
                JSRuntime.InvokeVoidAsync("scrollToBottom", TextSpaceRef);
            });

            hubConnection.On<Message>("AddReply", (rpl) => 
            {
                System.Console.WriteLine(rpl); 
                messages.Add(rpl);
                StateHasChanged();
                JSRuntime.InvokeVoidAsync("scrollToBottom", TextSpaceRef);
            });

        hubConnection.On<IList<Message>>("AddMessagePack", (pack =>
            {
                System.Console.WriteLine(pack.Count);
                  messages.InsertRange(0, pack);
                  StateHasChanged();
                  loaded += 20;
                  
            }));

        await hubConnection.StartAsync();

        System.Console.WriteLine("Connected to hub");
   }
 
    protected override async Task OnParametersSetAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.InvokeAsync("LeaveRoom", chat.Id);
        }
        
        chat = await chatService.GetChatById(Guid.Parse(chatId));

        await Connect();

        StateHasChanged();

        messages.Clear();

        loaded = 0;

        allLoaded = false;
        
        await hubConnection.InvokeAsync("JoinRoom", chatId);

        System.Console.WriteLine("joined room");

        await hubConnection.InvokeAsync("GetMassagePack", chatId, loaded, Convert.ToString(hubConnection));

        await JSRuntime.InvokeVoidAsync("scrollToBottom", TextSpaceRef);

        allLoaded = true;
        //System.Console.WriteLine(messages.Count);

    }
 
}


